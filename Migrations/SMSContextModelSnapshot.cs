// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMS.Data;

#nullable disable

namespace sms.Migrations
{
    [DbContext(typeof(SMSContext))]
    partial class SMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("sms.Models.AcadYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AcadYear");
                });

            modelBuilder.Entity("sms.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResidenceAddress")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("sms.Models.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AcadYearId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int>("ProgStreamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearLevelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AcadYearId");

                    b.HasIndex("ProgStreamId");

                    b.HasIndex("YearLevelId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("sms.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("sms.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("sms.Models.CourseAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AcadYearId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SemesterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AcadYearId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("SemesterId");

                    b.ToTable("CourseAssignment");
                });

            modelBuilder.Entity("sms.Models.CourseRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AcadYearId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Score1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Score2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("YearLevelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AcadYearId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId");

                    b.HasIndex("YearLevelId");

                    b.ToTable("CourseRegistration");
                });

            modelBuilder.Entity("sms.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("sms.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GenderType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("sms.Models.GradingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GradingSystem");
                });

            modelBuilder.Entity("sms.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("sms.Models.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("sms.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("sms.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentType");
                });

            modelBuilder.Entity("sms.Models.ProgStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GradingSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProgStreamName")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StreamsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GradingSystemId");

                    b.HasIndex("ProgrammeId");

                    b.HasIndex("StreamsId");

                    b.ToTable("ProgStream");
                });

            modelBuilder.Entity("sms.Models.Programme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Programme");
                });

            modelBuilder.Entity("sms.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("sms.Models.Streams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Streams");
                });

            modelBuilder.Entity("sms.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProgStreamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("ProgStreamId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("sms.Models.StudentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StudentStatus");
                });

            modelBuilder.Entity("sms.Models.YearLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("YearLevelName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("YearLevel");
                });

            modelBuilder.Entity("sms.Models.Bill", b =>
                {
                    b.HasOne("sms.Models.AcadYear", "AcadYear")
                        .WithMany("Bill")
                        .HasForeignKey("AcadYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.ProgStream", "ProgStream")
                        .WithMany("Bill")
                        .HasForeignKey("ProgStreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.YearLevel", "YearLevel")
                        .WithMany("Bill")
                        .HasForeignKey("YearLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcadYear");

                    b.Navigation("ProgStream");

                    b.Navigation("YearLevel");
                });

            modelBuilder.Entity("sms.Models.Course", b =>
                {
                    b.HasOne("sms.Models.Department", "Department")
                        .WithMany("Course")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("sms.Models.CourseAssignment", b =>
                {
                    b.HasOne("sms.Models.AcadYear", "AcadYear")
                        .WithMany("CourseAssignment")
                        .HasForeignKey("AcadYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.Course", "Course")
                        .WithMany("CourseAssignment")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.Instructor", "Instructor")
                        .WithMany("CourseAssignment")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.Semester", "Semester")
                        .WithMany("CourseAssignment")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcadYear");

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("sms.Models.CourseRegistration", b =>
                {
                    b.HasOne("sms.Models.AcadYear", "AcadYear")
                        .WithMany("CourseRegistration")
                        .HasForeignKey("AcadYearId");

                    b.HasOne("sms.Models.Course", "Course")
                        .WithMany("CourseRegistration")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.Semester", "Semester")
                        .WithMany("CourseRegistration")
                        .HasForeignKey("SemesterId");

                    b.HasOne("sms.Models.Student", "Student")
                        .WithMany("CourseRegistration")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.YearLevel", "YearLevel")
                        .WithMany("CourseRegistration")
                        .HasForeignKey("YearLevelId");

                    b.Navigation("AcadYear");

                    b.Navigation("Course");

                    b.Navigation("Semester");

                    b.Navigation("Student");

                    b.Navigation("YearLevel");
                });

            modelBuilder.Entity("sms.Models.Instructor", b =>
                {
                    b.HasOne("sms.Models.Department", "Department")
                        .WithMany("Instructor")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("sms.Models.Payment", b =>
                {
                    b.HasOne("sms.Models.PaymentType", "PaymentType")
                        .WithMany("Payment")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.Student", "Student")
                        .WithMany("Payment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("sms.Models.ProgStream", b =>
                {
                    b.HasOne("sms.Models.Department", "Department")
                        .WithMany("ProgStream")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.GradingSystem", "GradingSystem")
                        .WithMany("ProgStream")
                        .HasForeignKey("GradingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.Programme", "Programme")
                        .WithMany("ProgStream")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.Streams", "Streams")
                        .WithMany("ProgStream")
                        .HasForeignKey("StreamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("GradingSystem");

                    b.Navigation("Programme");

                    b.Navigation("Streams");
                });

            modelBuilder.Entity("sms.Models.Student", b =>
                {
                    b.HasOne("sms.Models.Country", "Country")
                        .WithMany("Student")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.Gender", "Gender")
                        .WithMany("Student")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("Student")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sms.Models.ProgStream", "ProgStream")
                        .WithMany("Student")
                        .HasForeignKey("ProgStreamId");

                    b.Navigation("Country");

                    b.Navigation("Gender");

                    b.Navigation("MaritalStatus");

                    b.Navigation("ProgStream");
                });

            modelBuilder.Entity("sms.Models.AcadYear", b =>
                {
                    b.Navigation("Bill");

                    b.Navigation("CourseAssignment");

                    b.Navigation("CourseRegistration");
                });

            modelBuilder.Entity("sms.Models.Country", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("sms.Models.Course", b =>
                {
                    b.Navigation("CourseAssignment");

                    b.Navigation("CourseRegistration");
                });

            modelBuilder.Entity("sms.Models.Department", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("ProgStream");
                });

            modelBuilder.Entity("sms.Models.Gender", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("sms.Models.GradingSystem", b =>
                {
                    b.Navigation("ProgStream");
                });

            modelBuilder.Entity("sms.Models.Instructor", b =>
                {
                    b.Navigation("CourseAssignment");
                });

            modelBuilder.Entity("sms.Models.MaritalStatus", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("sms.Models.PaymentType", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("sms.Models.ProgStream", b =>
                {
                    b.Navigation("Bill");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("sms.Models.Programme", b =>
                {
                    b.Navigation("ProgStream");
                });

            modelBuilder.Entity("sms.Models.Semester", b =>
                {
                    b.Navigation("CourseAssignment");

                    b.Navigation("CourseRegistration");
                });

            modelBuilder.Entity("sms.Models.Streams", b =>
                {
                    b.Navigation("ProgStream");
                });

            modelBuilder.Entity("sms.Models.Student", b =>
                {
                    b.Navigation("CourseRegistration");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("sms.Models.YearLevel", b =>
                {
                    b.Navigation("Bill");

                    b.Navigation("CourseRegistration");
                });
#pragma warning restore 612, 618
        }
    }
}
